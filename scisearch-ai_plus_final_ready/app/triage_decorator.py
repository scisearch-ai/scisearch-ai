# triage_decorator.py
import re
from collections import defaultdict
from app.triage_memory import TriageMemory

# üß† Inicializa√ß√£o da mem√≥ria de aprendizado global
memory = TriageMemory()

def triage_article(pico, abstract):
    """
    Analisa automaticamente o abstract para decidir inclus√£o/exclus√£o com base na estrutura PICOT.
    Retorna um dicion√°rio com decis√£o e justificativa.
    """
    decision = "exclude"
    justification = "This study does not clearly match the PICOT structure provided."

    # üîç Identifica√ß√£o simples por palavras-chave (substitu√≠vel por NLP posterior)
    found = defaultdict(bool)
    tokens = {
        "P": pico.get("population", "").lower(),
        "I": pico.get("intervention", "").lower(),
        "O": pico.get("outcome", "").lower(),
    }

    abstract_lower = abstract.lower()
    
    for key, term in tokens.items():
        if term and term in abstract_lower:
            found[key] = True

    # ‚úÖ Crit√©rio b√°sico para inclus√£o: P, I e O presentes
    if all(found.values()):
        decision = "include"
        justification = "Population, intervention and outcome are clearly mentioned in the abstract."

    # üìö Verifica se j√° existe decis√£o aprendida
    learned = memory.check_learned(pico, abstract)
    if learned:
        return learned

    # üì• Salva a decis√£o para aprendizado futuro
    memory.learn(pico, abstract, decision, justification)

    return {
        "decision": decision,
        "justification": justification
    }
